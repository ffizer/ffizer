name: release

# https://help.github.com/en/articles/events-that-trigger-workflows#release-event-release
# on: release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "version to set"
        required: true
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

permissions:
  contents: write

jobs:
  precheck:
    # if: startsWith(github.event.head_commit.message, 'Releasing version') == true
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cancel previous run
        uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Commit version
      #   if: github.event.inputs.version != null
      #   run: |
      #     VERSION="${{ github.event.inputs.version }}"
      #     # TODO replace `sed` by `toml_edit`, because `sed` can replace version of dependencies
      #     sed -i -e "s/^version = "\(.*\)"/version = "$VERSION/g" Cargo.toml
      #     git add Cargo.toml
      #     git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git config --global user.name "GitHub Action"
      #     git commit -a -m "ðŸš€ (github-workflow) version $VERSION"
      #     git tag -a "$VERSION" -m "ðŸ”– $VERSION"
      #     git push --follow-tags
      - name: Version
        id: vars
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          #if [ -z "$VERSION" ] ; then
          #  VERSION="${{ github.ref }}" # from tag
          #fi
          if [ -z "$VERSION" ] ; then
            VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

  build:
    needs: [precheck]
    uses: ./.github/workflows/_build.yml
    with:
      version: ${{ needs.precheck.outputs.VERSION }}

  universal:
    needs: [precheck, build]
    uses: ./.github/workflows/_build-universal.yml
    with:
      version: ${{ needs.precheck.outputs.VERSION }}

  release:
    needs: [precheck, build, universal]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          merge-multiple: true

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          arguments: full-release -PartifactsDir=artifacts -PskipArchiveResolver
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.JRELEASER_GITHUB_TOKEN }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
